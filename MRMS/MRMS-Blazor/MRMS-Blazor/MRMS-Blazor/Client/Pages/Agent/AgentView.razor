@page "/agentView"
@using MRMS_Blazor.Shared.CommonSection;

@using MRMS_Blazor.Shared.Services;
<h3>AgentView</h3>
@inject AgentService agentService

@if (agents is null)
{
    <img src="https://media.giphy.com/media/hL9q5k9dk9l0wGd4e0/giphy.gif" width="100" height="100" class="rounded-3" />
}
else if (!agents.Any())
{
    <p>No agents found.</p>
}
else
{
    <div class="d-flex justify-content-end mb-2">
        <a class="btn btn-primary" href="AgentAdd">Add New</a>
    </div>
    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>Agent Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var agent in agents)
            {
                <tr>
                    <td>@agent.AgentId</td>
                    <td>@agent.Name</td>
                    <td>@agent.Email</td>
                    <td>@agent.Phone</td>
                    <td>
                        <a class="btn btn-success btn-sm" href="agent/edit/@agent.AgentId">Edit</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAgent(agent.AgentId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<Agent> agents;

    protected override async Task OnInitializedAsync()
    {
        agents = await agentService.GetAgentsAsync();
    }

    private async Task DeleteAgent(int agentId)
    {
        var result = await agentService.DeleteAgentAsync(agentId);

        if (result !=null)
        {
            agents = await agentService.GetAgentsAsync();
        }
        else
        {
            
            // Show error message to user
            Console.WriteLine("An error occurred while deleting the agent.");

            // Wait for 5 seconds before clearing the error message
            await Task.Delay(5000);

            // Refresh the list of agents
            agents = await agentService.GetAgentsAsync();
        }
    }



}

