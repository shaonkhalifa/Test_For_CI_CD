@page "/applicantView"
@using MRMS_Blazor.Shared.Services;
@using MRMS_Blazor.Shared.ApplicantSection;
<h3>ApplicantView</h3>
@inject ApplicantService applicantService;
@inject HttpClient httpClient

@if (applicants is null)
{
    <img src="https://media.giphy.com/media/hL9q5k9dk9l0wGd4e0/giphy.gif" width="100" height="100" class="rounded-3" />
}
else if (!applicants.Any())
{
    <p>No applicant found.</p>
}
else
{
    <div class="d-flex justify-content-end mb-2">
        <a class="btn btn-primary" href="AgentAdd">Add New</a>
    </div>
    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>Passsport No</th>
                <th>Passport Expiry</th>
                <th>Name</th>
                <th>FathersName</th>
                <th>MothersName</th>
                <th>Spouse</th>
                <th>Birth Certificate</th>
                <th>Email</th>
                <th>Religion</th>
                <th>Education</th>
                <th>Gender</th>
                @*<th>Action</th>*@
            </tr>
        </thead>
        <tbody>
            @foreach (var applicant in applicants)
            {
                <tr>
                    <td>@applicant.PasssportNo</td>
                    <td>@applicant.PassportExpiry</td>
                    <td>@applicant.Name</td>
                    <td>@applicant.FathersName</td>
                    <td>@applicant.MothersName</td>
                    <td>@applicant.Spouse</td>
                    <td>@applicant.BirthCertificateNo</td>
                    <td>@applicant.Email</td>
                    <td>@applicant.Religion</td>
                    <td>@applicant.Education</td>
                    <td>@applicant.Gender</td>
                    <td>
                        

                    </td>
@*                    <td>
                        <a class="btn btn-success btn-sm" href="agent/edit/@agent.AgentId">Edit</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAgent(agent.AgentId)">Delete</button>
                    </td>*@
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<Applicant> applicants;
    //private string imageUrl;
    protected override async Task OnInitializedAsync()
    {
        //// Make an HTTP GET request to retrieve the image data
        //var imageData = await httpClient.GetByteArrayAsync(Pic);

        //// Convert the byte array to a base64 encoded string
        //imageUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(imageData)}";
        applicants = await applicantService.GetAgentsAsync();
    }

    //private async Task DeleteAgent(int agentId)
    //{
    //    var result = await applicantService.DeleteAgentAsync(agentId);

    //    if (result != null)
    //    {
    //        agents = await agentService.GetAgentsAsync();
    //    }
    //    else
    //    {

    //        // Show error message to user
    //        Console.WriteLine("An error occurred while deleting the agent.");

    //        // Wait for 5 seconds before clearing the error message
    //        await Task.Delay(5000);

    //        // Refresh the list of agents
    //        agents = await agentService.GetAgentsAsync();
    //    }
    //}



}

